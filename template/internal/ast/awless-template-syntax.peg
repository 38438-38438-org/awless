# PEG for awless template syntax
package ast

type Peg Peg {
 *AST
}

Script   <- (BlankLine* Statement BlankLine*)+ WhiteSpacing EndOfFile
Statement <- { p.NewStatement() } WhiteSpacing (CmdExpr / Declaration / Comment) WhiteSpacing EndOfLine* { p.StatementDone() }
Action <- [a-z]+
Entity <- [a-z0-9]+
Declaration <- <Identifier> { p.addDeclarationIdentifier(text) }
               Equal
               ( CmdExpr / ValueExpr )
ValueExpr <- { p.addValue() } CompositeValue
CmdExpr <- <Action> { p.addAction(text) }
        MustWhiteSpacing <Entity> { p.addEntity(text) }
        (MustWhiteSpacing Params)?

Params <- Param+
Param <- <Identifier> { p.addParamKey(text) }
         Equal
         CompositeValue
         WhiteSpacing

Identifier <- [a-zA-Z0-9-_.]+

CompositeValue <- ListValue / Value

ListValue <- {  p.addFirstValueInList() } '[' WhiteSpacing Value WhiteSpacing
            (',' WhiteSpacing Value WhiteSpacing )* ']' {  p.lastValueInList() }

NoRefValue <- HoleValue {  p.addParamHoleValue(text) }
        / HolesStringValue {  p.addHolesStringParam(text) }
        / AliasValue {  p.addAliasParam(text) }
        / DoubleQuote CustomTypedValue DoubleQuote
        / SingleQuote CustomTypedValue SingleQuote
        / CustomTypedValue
        / DoubleQuote <DoubleQuotedValue> { p.addStringValue(text) } DoubleQuote
        / SingleQuote <SingleQuotedValue> { p.addStringValue(text) } SingleQuote
        / <OtherParamValue> { p.addParamValue(text) }

Value <- RefValue {  p.addParamRefValue(text) }
      / NoRefValue
        
CustomTypedValue <- <CidrValue> { p.addParamCidrValue(text) }
        / <IpValue> { p.addParamIpValue(text) }
        / <IntRangeValue> { p.addParamValue(text) }

OtherParamValue <- [a-zA-Z0-9-._:/+;~@<>*]+ # This regex is in sync with template/internal/ast.simpleStringValue

DoubleQuotedValue <- [^"]*
SingleQuotedValue <- [^']*

CidrValue <- [0-9]+[.][0-9]+[.][0-9]+[.][0-9]+'/'[0-9]+
IpValue <- [0-9]+[.][0-9]+[.][0-9]+[.][0-9]+
IntRangeValue <- [0-9]+'-'[0-9]+

RefValue <- '$'<Identifier>
AliasValue <- '@'<OtherParamValue> / '@' DoubleQuote <DoubleQuotedValue> DoubleQuote / '@' SingleQuote <SingleQuotedValue> SingleQuote 
HoleValue <- '{'WhiteSpacing<Identifier>WhiteSpacing'}'
HolesStringValue <- <(OtherParamValue? HoleValue OtherParamValue?)+>

Comment <- '#'(!EndOfLine .)* / '//'(!EndOfLine .)*

SingleQuote <- '\''
DoubleQuote <- '"'

WhiteSpacing <- Whitespace*
MustWhiteSpacing <- Whitespace+
Equal <- WhiteSpacing '=' WhiteSpacing
BlankLine <- WhiteSpacing EndOfLine
Whitespace   <- ' ' / '\t'
EndOfLine <- '\r\n' / '\n' / '\r'
EndOfFile <- !.
