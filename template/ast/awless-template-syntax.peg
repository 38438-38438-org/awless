# PEG for awless template syntax
package ast

# parser declaration

type Peg Peg {
 *AST
}

Script   <- Spacing Statement+ EndOfFile
Statement <- Spacing (Expr / Declaration) Spacing EndOfLine*
Action <- 'create' / 'delete' / 'start' / 'stop' / 'update' / 'attach' / 'check'
Entity <- 'vpc' / 'subnet' / 'instance' / 'volume' / 'tags' / 'user' / 'group' / 'role' / 'policy' / 'keypair' / 'securitygroup' / 'internetgateway' / 'routetable' / 'route'
Declaration <- <Identifier> { p.AddDeclarationIdentifier(text) }
               Equal
               Expr
Expr <- <Action> { p.AddAction(text) }
        MustWhiteSpacing <Entity> { p.AddEntity(text) }
        (MustWhiteSpacing Params)? { p.EndOfParams() }

Params <- Param+
Param <- <Identifier> { p.AddParamKey(text) }
         Equal
         Value
         WhiteSpacing

Identifier <- [a-zA-Z-_.]+
Value <- HoleValue {  p.AddParamHoleValue(text) }
        / AliasValue {  p.AddParamAliasValue(text) }
        / RefValue {  p.AddParamRefValue(text) }
        / <CidrValue> { p.AddParamCidrValue(text) }
        / <IpValue> { p.AddParamIpValue(text) }
        / <IntRangeValue> { p.AddParamValue(text) }
        / <IntValue> { p.AddParamIntValue(text) }
        / <StringValue> { p.AddParamValue(text) }

StringValue <- [a-zA-Z0-9-._]+
CidrValue <- [0-9]+.[0-9]+.[0-9]+.[0-9]+'/'[0-9]+
IpValue <- [0-9]+.[0-9]+.[0-9]+.[0-9]+
IntValue <- [0-9]+
IntRangeValue <- [0-9]+'-'[0-9]+
RefValue <- '$'<Identifier>
AliasValue <- '@'<Identifier>
HoleValue <- '{'WhiteSpacing<Identifier>WhiteSpacing'}'

Spacing <- Space*
WhiteSpacing <- Whitespace*
MustWhiteSpacing <- Whitespace+
Equal <- Spacing '=' Spacing
Space   <- Whitespace / EndOfLine
Whitespace   <- ' ' / '\t'
EndOfLine <- '\r\n' / '\n' / '\r'
EndOfFile <- !.